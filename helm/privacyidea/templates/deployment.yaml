apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "privacyidea.fullname" . }}
  labels:
    {{- include "privacyidea.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "privacyidea.selectorLabels" . | nindent 6 }}
  strategy:
    type: {{ .Values.strategy.type }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "privacyidea.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "privacyidea.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
    {{- if not .Values.skipInitContainers }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: pgchecker
          image: "{{ .Values.pgchecker.image.repository }}:{{ .Values.pgchecker.image.tag }}"
          imagePullPolicy: {{ .Values.pgchecker.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.pgchecker.securityContext | nindent 12 }}
          command:
            - sh
            - -c
            - |
              echo 'Waiting for PostgreSQL to become ready...'
              until printf "." && nc -z -w 2 {{ include "privacyidea.postgresql.fullname" . }} {{ .Values.postgresql.primary.service.ports.postgresql }}; do
                  sleep 2;
              done;
              echo 'PostgreSQL OK âœ“'
          resources:
            {{- toYaml .Values.pgchecker.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.privacyidea.initialSetup.enabled }}
        - name: {{ .Chart.Name }}-init
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag | default .Chart.AppVersion }}"
          command: 
            - /bin/bash 
            - /etc/privacyidea/config/init.sh
          volumeMounts:
            - name: config-volume
              mountPath: "/etc/privacyidea/config/"
            - name: key-volume
              mountPath: "/etc/privacyidea/secrets/"
          env:
          - name: PRIVACYIDEA_CONFIGFILE
            value: /etc/privacyidea/config/pi.cfg
          - name: DB_CONN
            value: {{ include "privacyidea.sqlstring" . | quote }}
          - name: DB_HOST
            valueFrom: { secretKeyRef: { name: {{ include "privacyidea.dbsecret" .}}, key: host } }
          - name: DB_PORT
            valueFrom: { secretKeyRef: { name: {{ include "privacyidea.dbsecret" .}}, key: port } }
          - name: DB_NAME
            valueFrom: { secretKeyRef: { name: {{ include "privacyidea.dbsecret" .}}, key: dbname } }
          - name: DB_USER
            valueFrom: { secretKeyRef: { name: {{ include "privacyidea.dbsecret" .}}, key: user } }
          - name: DB_PASS
            valueFrom: { secretKeyRef: { name: {{ include "privacyidea.dbsecret" .}}, key: password } }
          envFrom:
          - secretRef:
              name: {{ include "privacyidea.adminsecret" . }}
        {{- end }}
        {{- with .Values.extraInitContainers }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
    {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: config-volume
            mountPath: "/etc/privacyidea/config"
          - name: key-volume
            mountPath: "/etc/privacyidea/secrets"
            {{- if not .Values.privacyidea.initialSetup.enabled }}
            readOnly: true
            {{- end }}
          {{- with .Values.extraVolumeMounts }}
          {{- tpl . $ | nindent 10 }}
          {{- end }}
          env:
            - name: PRIVACYIDEA_CONFIGFILE
              value: /etc/privacyidea/config/pi.cfg
            - name: DB_CONN
              value: {{ include "privacyidea.sqlstring" .}}
          {{- with .Values.extraEnv }}
          {{- tpl . $ | nindent 12 }}
          {{- end }}
          envFrom:
          {{- if .Values.postgresql.enabled }}
            - secretRef:
                name:  {{ include "privacyidea.dbsecret" . }}
          {{- end }}
          {{- with .Values.extraEnvFrom }}
          {{- tpl . $ | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "privacyidea.fullname" .}}-config
        - name: key-volume
        {{- if .Values.privacyidea.initialSetup.enabled }}
          {{- if  .Values.privacyidea.persistence.enabled }}
          persistentVolumeClaim:
            {{- if .Values.privacyidea.persistence.existingClaim }}
            claimName: {{ .Values.privacyidea.persistence.existingClaim }}
            {{- else}}
            claimName: {{ include "privacyidea.fullname" .}}-pvc
            {{- end }}
          {{- else }}
          emptyDir:
            sizeLimit: 1Gi
          {{- end }}
        {{- else if .Values.privacyidea.initialSetup.existingSecret }}
          secret:
            secretName: {{ .Values.privacyidea.initialSetup.existingSecret }}
            optional: false
        {{- else if .Values.privacyidea.initialSetup.csiVolume.enabled }}
          csi:
            driver: {{ .Values.privacyidea.initialSetup.csiVolume.driver }}
            readOnly: {{ .Values.privacyidea.initialSetup.csiVolume.readOnly }}
            volumeAttributes:
              {{- with .Values.privacyidea.initialSetup.csiVolume.volumeAttributes }}
              {{- tpl . $ | nindent 12 }}
              {{- end }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
