apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "privacyidea.fullname" . }}-config
  labels:
    {{- include "privacyidea.labels" . | nindent 4 }}
data:
  pi.cfg: |
    from os import environ
    # The realm, where users are allowed to login as administrators
    SUPERUSER_REALM = ['super', 'administrators']
    # Your database
    SQLALCHEMY_DATABASE_URI = f'{environ["DB_CONN"]}://{environ["DB_USER"]}:{environ["DB_PASS"]}@{environ["DB_HOST"]}:{environ["DB_PORT"]}/{environ["DB_NAME"]}'
    SQLALCHEMY_ENGINE_OPTIONS = {
        "pool_pre_ping": True,
        "pool_recycle": 300,
    }
    # This is used to encrypt the auth_token
    SECRET_KEY = {{ .Values.privacyidea.secretKey | quote }}
    # This is used to encrypt the admin passwords
    PI_PEPPER = {{ .Values.privacyidea.pepper | quote }}
    # This is used to encrypt the token data and token passwords
    PI_ENCFILE = '/etc/privacyidea/secrets/enckey'
    # This is used to sign the audit log
    PI_AUDIT_KEY_PRIVATE = '/etc/privacyidea/secrets/private.pem'
    PI_AUDIT_KEY_PUBLIC = '/etc/privacyidea/secrets/public.pem'
    PI_AUDIT_SERVERNAME = {{ .Values.privacyidea.host | quote }}
    # PI_AUDIT_MODULE = <python audit module>
    # PI_AUDIT_SQL_URI = <special audit log DB uri>
    # Truncate Audit entries to fit into DB columns
    PI_AUDIT_SQL_TRUNCATE = True
    # PI_LOGFILE = '....'
    PI_LOGLEVEL = {{ .Values.privacyidea.logLevel | default 20 }}
    # PI_INIT_CHECK_HOOK = 'your.module.function'
    # PI_CSS = '/location/of/theme.css'
    {{- if .Values.privacyidea.customization.logoPath }}
    PI_LOGO = {{ .Values.privacyidea.customization.logoPath | quote }}
    {{- end }}
    # PI_UI_DEACTIVATED = False
  init.sh: |
    pi-manage create_tables
    pi-manage create_enckey
    pi-manage create_audit_keys
    pi-manage admin add ${PRIVACYIDEA_ADMIN_USER} --password=${PRIVACYIDEA_ADMIN_PASSWORD}
